generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  phone            String     @unique
  email            String?    @unique
  password         String
  name             String?
  addresses        Address[]
  orders           Order[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Cart             Cart?      @relation(name: "AdminCart")
  SharedCartId     String[]   @db.ObjectId
  SharedCart       Cart[]     @relation(name: "SharedCart", fields: [SharedCartId], references: [id])
  Wallet           Wallet[]
  Review           Review[]
  Wishlist         Wishlist?
  SharedWishListId String[]   @db.ObjectId
  SharedWishList   Wishlist[] @relation(name: "SharedWishList", fields: [SharedWishListId], references: [id])
  recentlyViewed   Product[]
}

model Address {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  stars        Float
  about        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartItem     CartItem[]
  OrderItem    OrderItem[]
  Review       Review[]
  WishlistItem WishlistItem[]
  categoryId   String         @db.ObjectId
  Category     Category       @relation(fields: [categoryId], references: [id])
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?        @db.ObjectId
  Tips         Tips[]
  price        Float
  images       String[]
  object       String
}

model Tips {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  image       String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    String[]
}

model Cart {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String     @unique @db.ObjectId
  admin         User       @relation(name: "AdminCart", fields: [adminId], references: [id])
  sharedUserIds String[]   @db.ObjectId
  sharedUsers   User[]     @relation(name: "SharedCart", fields: [sharedUserIds], references: [id])
  items         CartItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShipMent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  addressId   String      @db.ObjectId
  address     Address     @relation(fields: [addressId], references: [id])
  items       OrderItem[]
  totalAmount Float
  status      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ShipMent    ShipMent[]
  shipMentIds String[]    @db.ObjectId
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketingCampaign {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Wallet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  balance   Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String         @unique @db.ObjectId
  admin         User?          @relation(fields: [adminId], references: [id])
  sharedUserIds String[]       @db.ObjectId
  sharedUsers   User[]         @relation(name: "SharedWishList", fields: [sharedUserIds], references: [id])
  items         WishlistItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
